name: generate malefic

on:
  workflow_dispatch:
    inputs:
      remark:
        description: 'You can write something here, it will appear in the TITLE of `gh run list`, and help u find the artifact easily.'
        required: false
        default: ''
      release:
        description: 'Release version (default: none, if you want to upload to a GitHub Release, create a release and provide the version).'
        required: false
        default: "none"
      targets:
        description: 'Target to compile (comma separated, e.g., windows-x64-gnu,windows-x32-gnu)'
        required: true
      edition:
        description: 'Edition'
        required: false
        default: 'community'
      package:
        description: 'Package'
        required: true
        default: 'beacon'
      malefic_modules_features:
        description: 'Malefic modules features'
        required: false
        default: 'full'
      malefic_config_yaml:
        description: 'Malefic config (Base64-encoded content of config.yaml , will be masked in logs)'
        required: false
      autorun_yaml:
        description: 'Autorun config (Base64-encoded content of autorun.yaml , will be masked in logs)'
        required: false

run-name: ${{ github.event.inputs.remark }}

permissions:
  contents: write

jobs:
  set_targets:
    runs-on: ubuntu-22.04
    outputs:
      targets_json: ${{ steps.set_targets.outputs.targets_json }}
    steps:
      - name: Set matrix
        id: set_targets
        run: |
          TARGETS="${{ github.event.inputs.targets }}"
          TARGETS_JSON=$(echo "[\"${TARGETS//,/\",\"}\"]")
          echo "targets_json=$TARGETS_JSON" >> $GITHUB_OUTPUT

  generate:
    needs: set_targets
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: ${{ fromJson(needs.set_targets.outputs.targets_json) }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Judge target_triple is win
        run: |
          if [[ "${{matrix.target}}" == *"windows"* ]]; then
            echo "is_win=1" >> $GITHUB_ENV
            wget https://github.com/chainreactors/malefic/releases/latest/download/resources.zip
            unzip resources.zip -d resources
            wget https://github.com/chainreactors/malefic/releases/latest/download/malefic-mutant-x86_64-unknown-linux-musl
            chmod +x malefic-mutant-x86_64-unknown-linux-musl
          else
            echo "is_win=0" >> $GITHUB_ENV
          fi

      - name: Generate config.yaml
        if : ${{ github.event.inputs.malefic_config_yaml != null }}
        run: |
          SECRET_CONFIG_YAML_CONTENT=$(jq -r '.inputs.malefic_config_yaml' $GITHUB_EVENT_PATH)
          echo "::add-mask::$SECRET_CONFIG_YAML_CONTENT"
          echo $SECRET_CONFIG_YAML_CONTENT
          echo "SECRET_CONFIG_YAML_CONTENT=$SECRET_CONFIG_YAML_CONTENT" >> $GITHUB_ENV
          echo "$SECRET_CONFIG_YAML_CONTENT" | base64 -d > config.yaml

      - name: Generate autorun.yaml
        if : ${{ github.event.inputs.autorun_yaml != null }}
        run: |
          SECRET_AUTORUN_YAML_CONTENT=$(jq -r '.inputs.autorun_yaml' $GITHUB_EVENT_PATH)
          echo "::add-mask::$SECRET_AUTORUN_YAML_CONTENT"
          echo "SECRET_AUTORUN_YAML_CONTENT=$SECRET_AUTORUN_YAML_CONTENT" >> $GITHUB_ENV
          echo "$SECRET_AUTORUN_YAML_CONTENT" | base64 -d > autorun.yaml

      - name: Build(${{ github.event.inputs.package }}, ${{matrix.target}})
        if : ${{ github.event.inputs.package == 'beacon' }}
        shell: 'script --return --quiet --log-out /dev/null --command "bash -e {0}"'
        run: |
          docker run -v $(pwd):/root/src ghcr.io/chainreactors/malefic-builder:latest \
           bash -c "./malefic-mutant-x86_64-unknown-linux-musl generate beacon;./malefic-mutant-x86_64-unknown-linux-musl build malefic --target ${{matrix.target}} "

      - name: Build(${{ github.event.inputs.package }}, ${{matrix.target}})
        if : ${{ github.event.inputs.package == 'pulse' }}
        shell: 'script --return --quiet --log-out /dev/null --command "bash -e {0}"'
        run: |
          docker run -v $(pwd):/root/src ghcr.io/chainreactors/malefic-builder:latest \
           bash -c "./malefic-mutant-x86_64-unknown-linux-musl generate pulse x64 win;./malefic-mutant-x86_64-unknown-linux-musl build pulse;"

      - name: Build(${{ github.event.inputs.package }}, ${{matrix.target}})
        if : ${{ github.event.inputs.package == 'bind' }}
        shell: 'script --return --quiet --log-out /dev/null --command "bash -e {0}"'
        run: |
          docker run -v $(pwd):/root/src ghcr.io/chainreactors/malefic-builder:latest \
           bash -c "./malefic-mutant-x86_64-unknown-linux-musl generate bind;./malefic-mutant-x86_64-unknown-linux-musl build bind --target ${{matrix.target}} "

      - name: Build(${{ github.event.inputs.package }}, ${{matrix.target}})
        if : ${{ github.event.inputs.package == 'prelude' }}
        shell: 'script --return --quiet --log-out /dev/null --command "bash -e {0}"'
        run: |
          docker run -v $(pwd):/root/src ghcr.io/chainreactors/malefic-builder:latest \
          bash -c "./malefic-mutant-x86_64-unknown-linux-musl generate prelude autorun.yaml;./malefic-mutant-x86_64-unknown-linux-musl build prelude"

      - name: Build(${{ github.event.inputs.package }},${{matrix.target}})
        if : ${{ github.event.inputs.package == 'modules' }}
        shell: 'script --return --quiet --log-out /dev/null --command "bash -e {0}"'
        run: |
          docker run -v $(pwd):/root/src ghcr.io/chainreactors/malefic-builder:v0.0.4 \
           bash -c "./malefic-mutant-x86_64-unknown-linux-musl generate modules ${{ github.event.inputs.malefic_modules_features }};./malefic-mutant-x86_64-unknown-linux-musl build modules"

      - name: Move ${{ github.event.inputs.package }} to output
        run: |
          mkdir -p output
          sudo chmod -R 777 target
          sudo chmod -R 777 output
          export prefix=./target/${{matrix.target}}/release
          export suffix=$([ "$is_win" = "1" ] && echo ".exe" || echo "")
          tree ./target
          if ${{ github.event.inputs.package == 'beacon' }} || ${{ github.event.inputs.package == 'bind' }}; then \
            mv $prefix/malefic$suffix output/malefic-${{ github.event.inputs.package }}$suffix; \
          elif ${{ github.event.inputs.package == 'prelude' }}; then \
            mv $prefix/malefic-prelude$suffix output/malefic-prelude$suffix; \
          elif ${{ github.event.inputs.package == 'pulse' }}; then \
            mv $prefix/malefic-pulse$suffix output/malefic-pulse$suffix;
          elif ${{ github.event.inputs.package == 'modules' }}; then \
            mv $prefix/modules.dll output/modules-${{matrix.target}}.dll; \
          fi

      - name: Upload artifact ${{matrix.target}}
        if: ${{ github.event.inputs.release == 'none' }}
        uses: actions/upload-artifact@v4
        with:
          name: malefic-${{matrix.target}}-${{ github.run_id }}
          path: output/*
          retention-days: 3 # you can change this value